# Default values for opal.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.


argoProject: ""
appPrefix: ""

imagePullSecrets: &dockerSecret regcred

oauth: &oauthSecret "opal-oauth-common"

tls: &tlsSecret "tls-certs"
#nameOverride: ""
#fullnameOverride: ""

namespaces:
  - &opalNS opal
  - &minioNS minio-tenant

source:
  url: ""
  targetRevision: ""

mongodb:
  enabled: true
  appValues:
    namespace: *opalNS
    image:
      tag: 5.0.9
      imagePullSecrets: *dockerSecret
    auth:
      enabled: true
      rootUser: rootuser
      rootPassword: ""
      usernames: []
      passwords: []
      databases: []
    replicaCount: 2

keycloak:
  enabled: true
  appValues:
    namespace: *opalNS
    secrets:
      env:
        stringData:
          # set these in the opal-setup values. ADMIN_PASSWORD is ignored
          KEYCLOAK_ADMIN: ""
          KEYCLOAK_ADMIN_PASSWORD: ""
    ingress:
      enabled: true
      rules:
        host: "keycloak-prod.opalacceptance.dso.mil"
    postgresql:
      enabled: false
      useExternal: true
      nameOverride: &keycloakPostgresName keycloak-postgres
    keycloakSetup:
      enabled: true
      existingSecret: *oauthSecret
    metrics:
      enabled: true
  postgres:
    nameOverride: *keycloakPostgresName
    namespace: *opalNS
    # PostgreSQL User to create
    postgresqlUsername: keycloak
    # PostgreSQL Password for the new user
    postgresqlPassword: keycloak
    # PostgreSQL Database to create
    postgresqlDatabase: keycloak
    # PostgreSQL network policy configuration
    networkPolicy:
      enabled: false
    global:
      imagePullSecrets:
        - *dockerSecret
    image:
      registry: registry1.dso.mil
      repository: ironbank/opensource/postgres/postgresql12
      tag: 12.19
    securityContext:
      enabled: true
      fsGroup: 26
      runAsUser: 26
      runAsGroup: 26
    containerSecurityContext:
      enabled: true
      runAsUser: 26
      capabilities:
        drop:
          - ALL
    resources:
      requests:
        cpu: "250m"
        memory: "256Mi"
      limits:
        cpu: "250m"
        memory: "256Mi"

traefik:
  enabled: true
  appValues:
    namespace: *opalNS
    image:
      tag: "v2.10.4"
    service:
      loadBalancerIP: ""
    tls:
      nameOverride: *tlsSecret
    ingress:
      enabled: false
      rules:
        host: ""

minioOperator:
  enabled: true
  appValues:
    namespace: *opalNS
    tenantNamespace: *minioNS
    imagePullSecrets: *dockerSecret
    containerSecurityContext:
      runAsUser: 1001
      runAsGroup: 1001
      runAsNonRoot: true
      capabilities:
        drop:
          - ALL
    resources:
      requests:
        cpu: 200m
        memory: 256Mi
        ephemeral-storage: 500Mi
      limits:
        cpu: 200m
        memory: 256Mi

minioInstance:
  enabled: false
  appValues:
    namespace: ""
    oauth:
      existingSecret: *oauthSecret
    baseDns: ""
    secrets:
      # both fields need to be filled in
      name: "minio-creds-secret"
      accessKey: "minio-admin"
    tls:
      name: tls-certs
    tenant:
      namespace: *minioNS
      imagePullSecrets:
        - *dockerSecret
      metrics:
        enabled: true
        # Defaults to 'prometheus-operated'
        prometheusSvc: ""
        # Defaults to 'monitoring'
        prometheusNamespace: ""
        # Defaults to 9090
        prometheusPort: ""
      pools:
        - servers: 4
          volumesPerServer: 4
          # make this value much larger if a production deployment
          size: 10Gi
          resources:
            requests:
              memory: 2Gi
              cpu: 1000m
            limits:
              memory: 2Gi
              cpu: 1000m
          securityContext:
            runAsUser: 1001
            runAsGroup: 1001
            fsGroup: 1001
            runAsNonRoot: true
          containerSecurityContext:
            runAsUser: 1001
            runAsGroup: 1001
            runAsNonRoot: true
      mountPath: /home/minio
      subPath: /data
      externalCaCertSecret:
        - name: tls-certs
      buckets:
        - name: metaflow-data
        - name: basket-data
        - name: airflow
      #change these to reflect desired domain names
      env:
        - name: MINIO_IDENTITY_OPENID_CONFIG_URL
          value: "https://keycloak-prod.{{ .Values.baseDns }}/realms/master/.well-known/openid-configuration"
        - name: MINIO_BROWSER_REDIRECT_URL
          value: "https://minio-prod.{{ .Values.baseDns }}"
        - name: MINIO_IDENTITY_OPENID_CLIENT_ID
          value: opal-jupyterhub
        - name: MINIO_IDENTITY_OPENID_CLAIM_NAME
          value: 'policy'
        - name: MINIO_IDENTITY_OPENID_REDIRECT_URI
          value: "https://minio-prod.{{ .Values.baseDns }}/oauth_callback"
      ## List of secret names to use for generating MinIO users during tenant provisioning
      users: [ ]
      ingress:
        api:
          enabled: false
          rules:
            host: ""
        console:
          enabled: true
          rules:
            host: "minio-prod.{{ .Values.baseDns }}"
nginx:
  enabled: true
  appValues:
    namespace: *opalNS
jupyterhub:
  enabled: true
  appValues:
    namespace: *opalNS
    baseDns: "opalacceptance.dso.mil"
    secrets:
    gitSync:
      enabled: true
      # Leave this empty, only fill it in the opal-setup chart values
      username: ""
      gitSecret:
        secretName: "git-creds"
    secrets:
      oauth:
        existingSecret: *oauthSecret
    image:
      tag: jupyterhub_v8
    imagePullSecrets:
      existingSecret: regcred
    env:
      #singleUserImage: "jupyterhub/singleuser"
      singleUserImage: "registry1.dso.mil/ironbank/opensource/metrostar/singleuser:core_singleuser_v2"
      opalBannerColor: "green"
      opalBannerText: "Unclassified"
      s3Endpointurl: "http://opal-minio-console.minio-tenant.svc.cluster.local:9090"
      keycloakJupyterhubOauthCallbackUrl: "https://opal-prod.{{ .Values.baseDns }}/hub/oauth_callback"
      jupyterhubBaseUrl: "https://opal-prod.{{ .Values.baseDns }}"
      keycloakJupyterhubAuthorizeUrl: "https://keycloak-prod.{{ .Values.baseDns }}/realms/master/protocol/openid-connect/auth"
      keycloakJupyterhubUserdataUrl: "https://keycloak-prod.{{ .Values.baseDns }}/realms/master/protocol/openid-connect/userinfo"
      keycloakOpalApiUrl: "https://keycloak-prod.{{ .Values.baseDns }}/realms/master/protocol/openid-connect/token"
    ingress:
      enabled: true
      rules:
        host: "opal-prod.{{ .Values.baseDns }}"
    # metaflow datastore size
    resources:
      useAzureFile: false
      storage: 2Gi
daskGateway:
  enabled: true
  appValues:
    namespace: *opalNS
