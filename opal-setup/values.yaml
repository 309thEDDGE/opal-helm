# leave these empty to disable them in the rendered app yamls
argoProject: &argoProj "test"
appPrefix: &appPrefix "test"

namespaces:
  - &minioNS minio-tenant
  - &opalNS opal

# an unfortunate requirement of project-scoping the app-of-apps
appNamespace: *opalNS

imagePullSecrets:
  name: regcred
  namespaces:
    - *opalNS
    - *minioNS

useAzureFile: &useAzure false

gitSyncSecret:
  namespace: *opalNS
  secretName: &gitSyncSecret "git-creds"

tls:
  name: tls-certs
  namespaces:
    - *minioNS
    - *opalNS

oauth:
  name: opal-oauth-common
  namespaces:
    - *opalNS
    - *minioNS

valuesFile: test-values.yaml

source: &appSource
  url: "https://github.com/309thEDDGE/opal-helm.git"
  targetRevision: "aks-comp-rebase-test"

# Most of this is just propagating settings from above, but change as needed for your use case
appValues:
  namespaces:
    - *opalNS
    - *minioNS
  argoProject: *argoProj
  appPrefix: *appPrefix
  source: *appSource
  mongodb:
    enabled: true
    appValues:
      namespaceOverride: *opalNS
      namespace: *opalNS
      auth:
        enabled: true
        rootUser: rootuser
        rootPassword: ""
        usernames: []
        passwords: []
        databases: []
      replicaCount: 2
  keycloak:
    namespace: *opalNS
    enabled: true
    # bootstrapper admin credentials. User should be disabled after post-install setup
    appValues:
      namespace: *opalNS
      secrets:
        env:
          stringData:
            KEYCLOAK_ADMIN: "admin"
            KEYCLOAK_ADMIN_PASSWORD: ""
            JAVA_OPTS_APPEND: -Djgroups.dns.query=""
    postgres:
      namespace: *opalNS
  traefik:
    enabled: true
    appValues:
      namespace: *opalNS
  minioOperator:
    enabled: true
    appValues:
      operator:
        namespace: *opalNS
        tenantNamespace: *minioNS
  minioInstance:
    enabled: true
    creds:
      namespace: *minioNS
    secrets:
      accessKey: opal-administrator
    appValues:
      tenant:
        namespace: *minioNS
      oauth:
        existingSecret: "minio-creds-secret"
  nginx:
    enabled: true
    appValues:
      namespace: *opalNS
    restart: always
  jupyterhub:
    enabled: true
    appValues:
      namespace: *opalNS
      resources:
        useAzureFile: *useAzure
      gitSync:
        enabled: true
        username: ""
        gitSecret:
          secretName: *gitSyncSecret
        image:
          repository: registry.k8s.io/git-sync/git-sync
          tag: v4.0.0
  daskGateway:
    enabled: true
    appValues:
      namespace: *opalNS
      gateway:
        image:
          name: docker.io/library/dask-gateway-api
          tag: "test"
          pullPolicy: Never
        backend:
          image:
            name: docker.io/library/dask-gateway-controller
            tag: "test"
            pullPolicy: Never
      controller:
        image:
          name: docker.io/library/dask-gateway-controller
          tag: "test"
          pullPolicy: Never
      traefik:
        replicas: 1
        annotations: {}
        resources: {}
        image:
          name: traefik
          tag: "2.10.6"
          pullPolicy: IfNotPresent
        imagePullSecrets: []

        additionalArguments: []

        loglevel: WARN

        dashboard: false

  # Additional configuration for the traefik service
        service:
          type: LoadBalancer
          annotations: {}
          spec: {}
          ports:
            web:
        # The port HTTP(s) requests will be served on
              port: 80
              nodePort:
            tcp:
        # The port TCP requests will be served on. Set to `web` to share the
        # web service port
              port: web
              nodePort:

  # Settings for nodeSelector, affinity, and tolerations for the traefik pods
        nodeSelector: {}
        affinity: {}
        tolerations: []

