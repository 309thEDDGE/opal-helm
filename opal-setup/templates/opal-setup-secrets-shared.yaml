{{- $values := .Values }}
{{- $OAUTH_SECRET := ( randAlphaNum 64) }}

{{- range .Values.namespaces }}
---
# Generating two resources from one file because Oauth secret must be shared
# Generates shared secrets
{{ $secretName := $values.oauth.name }}
#{{ $ns := . }}
{{- $secret := lookup "v1" "Secret" . $secretName }}
{{- if not $secret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ . }}
  annotations:
    argocd.argoproj.io/hook: Skip
type: Opaque
data:
  KEYCLOAK_SECRET: {{ $OAUTH_SECRET | b64enc }}
  MINIO_IDENTITY_OPENID_CLIENT_SECRET: {{ $OAUTH_SECRET | b64enc }}
  KEYCLOAK_JUPYTERHUB_CLIENT_SECRET: {{ $OAUTH_SECRET | b64enc }}
{{- end }}
{{- end }}
---
{{ $minio := .Values.appValues.minioInstance }}
{{- $secretName := $minio.appValues.oauth.existingSecret }}
{{- $secret := lookup "v1" "Secret" $minio.appValues.tenant.namespace $secretName }}
{{- if not $secret }}
{{- if dig "secrets" true (.Values | merge (dict)) }}
{{- $ROOT_PASSWORD := (randAlphaNum 16 | quote)}}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $minio.appValues.oauth.existingSecret }}
  namespace: {{ $minio.creds.namespace }}
type: Opaque
stringData:
  config.env: |-
    export MINIO_ROOT_USER={{ $minio.secrets.accessKey | quote }}
    export MINIO_ROOT_PASSWORD={{$ROOT_PASSWORD}}
    export MINIO_IDENTITY_OPENID_CLIENT_SECRET={{ $OAUTH_SECRET | quote }}

data:
  ## Access Key for MinIO Tenant
  accesskey: {{ dig "secrets" "accessKey" "" ($minio | merge (dict)) | b64enc }}
  ## Secret Key for MinIO Tenant
  secretkey: {{$ROOT_PASSWORD | b64enc }}
  {{- end }}
{{- end }}
---