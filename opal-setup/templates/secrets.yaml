{{- $values := .Values }}
{{- $files := .Files }}

{{- range .Values.imagePullSecrets.namespaces }}
---
# Generates the regcred for opal and minio-tenant
apiVersion: v1
kind: Secret
metadata:
  name: {{ $values.imagePullSecrets.name }}
  namespace: {{ . }}
  annotations:
    argocd.argoproj.io/hook: Skip
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ $files.Get "dockerconfig.json" | b64enc }}
  {{- end }}
{{- range .Values.tls.namespaces }}
---
# Generates the tls certs for opal and minio-tenant
apiVersion: v1
kind: Secret
metadata:
  name: {{ $values.tls.name }}
  namespace: {{ . }}
  annotations:
    argocd.argoproj.io/hook: Skip
type: Opaque
data:
  public.crt: |-
    {{ $files.Get "tls.crt" | b64enc }}
  tls.crt: |-
    {{ $files.Get "tls.crt" | b64enc }}
  tls.key: |-
    {{ $files.Get "tls.key" | b64enc }}
  {{- end }}

{{- $OAUTH_SECRET := ( randAlphaNum 64) }}
{{- $secretName := $values.oauth.name }}
{{- range .Values.oauth.namespaces }}
  {{- $secret := lookup "v1" "Secret" . $secretName }}
  {{- if $secret }}
    {{- $OAUTH_SECRET = index $secret "data" "KEYCLOAK_SECRET" | b64dec }}
  {{- end }}
{{- end}}

{{- range .Values.namespaces }}
---
# Generates shared secrets
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ . }}
  annotations:
    argocd.argoproj.io/hook: Skip
type: Opaque
data:
  KEYCLOAK_SECRET: {{ $OAUTH_SECRET | b64enc }}
  MINIO_IDENTITY_OPENID_CLIENT_SECRET: {{ $OAUTH_SECRET | b64enc }}
  KEYCLOAK_JUPYTERHUB_CLIENT_SECRET: {{ $OAUTH_SECRET | b64enc }}
{{- end }}
{{- $secretName := .Values.keycloakenv.name }}
{{- $KEYCLOAK_ADMIN_PASSWORD := ( randAlphaNum 16 ) | quote }}
{{- range .Values.keycloakenv.namespaces }}
  {{- $secret := lookup "v1" "Secret" . $secretName }}
  {{- if $secret}}
  {{- $KEYCLOAK_ADMIN_PASSWORD = index $secret.data "KEYCLOAK_ADMIN_PASSWORD" | b64dec }}
  {{- end}}
{{- end}}
{{- range .Values.keycloakenv.namespaces }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ . }}
  {{- with $values.appValues.keycloak.appValues.secrets.env.annotations }}
  annotations:
  {{- range $key, $value := . }}
  {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
  {{- end }}
  {{- end }}
  labels:
type: {{ default "Opaque" $values.appValues.keycloak.appValues.secrets.type }}
{{- with $values.appValues.keycloak.appValues.secrets.env.stringData }}
stringData:
  {{- range $key, $value := . }}
    {{- if eq $key "KEYCLOAK_ADMIN_PASSWORD"}}
  KEYCLOAK_ADMIN_PASSWORD: {{ $KEYCLOAK_ADMIN_PASSWORD }}
    {{- else }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 2 }}
    {{- end }}
  {{- end }}
{{- end }}
{{- end }}
---
{{- if dig "secrets" true (.Values | merge (dict)) }}

{{ $minio := .Values.appValues.minioInstance }}
{{ $secretName := $minio.appValues.creds.existingSecret }}
{{ $secret := lookup "v1" "Secret" $minio.namespace $secretName }}

{{ $ROOT_PASSWORD := (randAlphaNum 16 | quote)}}
{{- if $secret }}
{{ $ROOT_PASSWORD = index $secret "data" "secretkey" | b64dec }}
{{- end }}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ $minio.namespace }}
type: Opaque
stringData:
  config.env: |-
    export MINIO_ROOT_USER={{ $minio.appValues.creds.accessKey | quote }}
    export MINIO_ROOT_PASSWORD={{$ROOT_PASSWORD}}
    export MINIO_IDENTITY_OPENID_CLIENT_SECRET={{ $OAUTH_SECRET | quote }}
data:
  ## Access Key for MinIO Tenant
  accesskey: {{ $minio.appValues.creds.accessKey | b64enc }}
  ## Secret Key for MinIO Tenant
  secretkey: {{ $ROOT_PASSWORD | b64enc }}
  {{- end }}

# jupyterhub-specific secrets
{{ $secretName := .Values.token.name }}
{{ $COOKIE_SECRET := ( randAlphaNum 64 | b64enc ) }}
{{ $API_TOKEN := ( randAlphaNum 64 | b64enc ) }}
{{ $CRYPT_KEY := (include "jupyterhub.randHex" 64 | b64enc ) }}
{{- range .Values.oauth.namespaces }}
  {{- $secret := lookup "v1" "Secret" . $secretName }}
  {{- if $secret }}
    {{- $COOKIE_SECRET = index $secret "data" "COOKIE_SECRET" }}
    {{- $API_TOKEN = index $secret "data" "JUPYTERHUB_API_TOKEN" }}
    {{- $CRYPT_KEY = index $secret "data" "JUPYTERHUB_CRYPT_KEY" }}
  {{- end }}
{{- end}}
{{- range .Values.token.namespaces }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ . }}
type: Opaque
data:
  COOKIE_SECRET: {{ $COOKIE_SECRET }}
  JUPYTERHUB_API_TOKEN: {{ $API_TOKEN }}
  JUPYTERHUB_CRYPT_KEY: {{ $CRYPT_KEY }}
{{- end }}

{{ $secretName := .Values.postgresql.name }}
{{ $POSTGRESQL_POSTGRES_PASSWORD := ( randAlphaNum 10 | b64enc ) }}
{{ $POSTGRESQL_PASSWORD := ( randAlphaNum 10 | b64enc ) }}
{{ $secret := lookup "v1" "Secret" "opal" $secretName }}
{{- range .Values.postgresql.namespaces }}
  {{- if $secret }}
    {{ $POSTGRESQL_POSTGRES_PASSWORD = index $secret "data" "postgresql-postgres-password" }}
    {{ $POSTGRESQL_PASSWORD = index $secret "data" "postgresql-password" }}
  {{- end }}
{{- end }}

{{- range .Values.postgresql.namespaces }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ . }}
type: Opaque
data:
  postgresql-postgres-password: {{ $POSTGRESQL_POSTGRES_PASSWORD }}
  postgresql-password: {{ $POSTGRESQL_PASSWORD }}
{{- end }}