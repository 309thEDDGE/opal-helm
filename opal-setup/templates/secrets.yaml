{{- $values := .Values }}
{{- $files := .Files }}
{{- $release:= .Release }}

{{- range .Values.imagePullSecrets.namespaces }}
---
# Generates the regcred for opal and minio-tenant
apiVersion: v1
kind: Secret
metadata:
  name: {{ $values.imagePullSecrets.name }}
  namespace: {{ . }}
  annotations:
    argocd.argoproj.io/hook: Skip
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: {{ $files.Get "dockerconfig.json" | b64enc }}
  {{- end }}
{{- range .Values.tls.namespaces }}
---
# Generates the tls certs for opal and minio-tenant
apiVersion: v1
kind: Secret
metadata:
  name: {{ $values.tls.name }}
  namespace: {{ . }}
  annotations:
    argocd.argoproj.io/hook: Skip
type: Opaque
data:
  public.crt: |-
    {{ $files.Get "tls.crt" | b64enc }}
  tls.crt: |-
    {{ $files.Get "tls.crt" | b64enc }}
  tls.key: |-
    {{ $files.Get "tls.key" | b64enc }}
{{- end }}

{{- $OAUTH_SECRET := ( randAlphaNum 64) }}

{{- range .Values.namespaces }}
---
# Generates shared secrets
{{ $secretName := $values.oauth.name }}
#{{ $ns := . }}
{{- $secret := lookup "v1" "Secret" . $secretName }}
{{- if not $secret }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretName }}
  namespace: {{ . }}
  annotations:
    argocd.argoproj.io/hook: Skip
type: Opaque
data:
  KEYCLOAK_SECRET: {{ $OAUTH_SECRET | b64enc }}
  MINIO_IDENTITY_OPENID_CLIENT_SECRET: {{ $OAUTH_SECRET | b64enc }}
  KEYCLOAK_JUPYTERHUB_CLIENT_SECRET: {{ $OAUTH_SECRET | b64enc }}
{{- end }}
{{- end }}
---
{{- $secretName := "{{ $release.Name }}-keycloak-env" }}
{{- $secret := lookup "v1" "Secret" .Values.appValues.keycloak.namespace $secretName }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $release.Name }}-keycloak-env
  namespace: {{ .Values.appValues.keycloak.namespace }}
  {{- with $values.appValues.keycloak.appValues.secrets.env.annotations }}
  annotations:
  {{- range $key, $value := . }}
  {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 4 }}
  {{- end }}
  {{- end }}
  labels:
type: {{ default "Opaque" $values.appValues.keycloak.appValues.secrets.type }}
{{- with $values.appValues.keycloak.appValues.secrets.env.stringData }}
stringData:
  {{- range $key, $value := . }}
    {{- if eq $key "KEYCLOAK_ADMIN_PASSWORD"}}
      {{- if $secret }}
  KEYCLOAK_ADMIN_PASSWORD: {{ index $secret.data "KEYCLOAK_ADMIN_PASSWORD" | b64dec }}
      {{- else }}
    {{- printf "%s: %s" $key (( randAlphaNum 16 ) | quote) | nindent 2 }}
      {{- end }}
    {{- else if eq $key "JAVA_OPTS_APPEND"}}
  JAVA_OPTS_APPEND: {{ $release.Name }}-keycloak-headless
    {{- else }}
    {{- printf "%s: %s" $key (tpl $value $ | quote) | nindent 2 }}
    {{- end }}
  {{- end }}
{{- end }}
---
{{ $minio := .Values.appValues.minioInstance }}
{{- $secretName := $minio.appValues.oauth.existingSecret }}
{{- $secret := lookup "v1" "Secret" $minio.appValues.tenant.namespace $secretName }}
{{- if not $secret }}
{{- if dig "secrets" true (.Values | merge (dict)) }}
{{- $ROOT_PASSWORD := (randAlphaNum 16 | quote)}}

apiVersion: v1
kind: Secret
metadata:
  name: {{ $minio.appValues.oauth.existingSecret }}
  namespace: {{ $minio.creds.namespace }}
type: Opaque
stringData:
  config.env: |-
    export MINIO_ROOT_USER={{ $minio.secrets.accessKey | quote }}
    export MINIO_ROOT_PASSWORD={{$ROOT_PASSWORD}}
    export MINIO_IDENTITY_OPENID_CLIENT_SECRET={{ $OAUTH_SECRET | quote }}

data:
  ## Access Key for MinIO Tenant
  accesskey: {{ dig "secrets" "accessKey" "" ($minio | merge (dict)) | b64enc }}
  ## Secret Key for MinIO Tenant
  secretkey: {{$ROOT_PASSWORD | b64enc }}
  {{- end }}
{{- end }}
---
# Generates git creds for jhub
apiVersion: v1
kind: Secret
metadata:
  name: {{ $values.gitSyncSecret.secretName }}
  namespace: {{ $values.gitSyncSecret.namespace }}
  annotations:
    argocd.argoproj.io/hook: Skip
type: Opaque
data:
  token: {{ $files.Get "git-creds" | b64enc }}
